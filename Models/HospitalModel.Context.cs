//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalManagementEntities : DbContext
    {
        public HospitalManagementEntities()
            : base("name=HospitalManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Nullable<int>> CreateBill(Nullable<int> billID, Nullable<int> userID, Nullable<int> patientID, Nullable<int> medcineID, Nullable<decimal> amount, string status, Nullable<decimal> due, Nullable<decimal> deposite, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> isActive, ObjectParameter result)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var medcineIDParameter = medcineID.HasValue ?
                new ObjectParameter("MedcineID", medcineID) :
                new ObjectParameter("MedcineID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dueParameter = due.HasValue ?
                new ObjectParameter("Due", due) :
                new ObjectParameter("Due", typeof(decimal));
    
            var depositeParameter = deposite.HasValue ?
                new ObjectParameter("Deposite", deposite) :
                new ObjectParameter("Deposite", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBill", billIDParameter, userIDParameter, patientIDParameter, medcineIDParameter, amountParameter, statusParameter, dueParameter, depositeParameter, createdByParameter, createdDateParameter, isActiveParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateCaseMedicine(Nullable<int> medicineID, Nullable<int> medID, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> diseaseID, Nullable<int> createdBy, Nullable<System.DateTime> cretedDate, Nullable<bool> isActive, ObjectParameter result)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var medIDParameter = medID.HasValue ?
                new ObjectParameter("MedID", medID) :
                new ObjectParameter("MedID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var cretedDateParameter = cretedDate.HasValue ?
                new ObjectParameter("CretedDate", cretedDate) :
                new ObjectParameter("CretedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateCaseMedicine", medicineIDParameter, medIDParameter, patientIDParameter, doctorIDParameter, diseaseIDParameter, createdByParameter, cretedDateParameter, isActiveParameter, result);
        }
    
        public virtual int CreateDoctor(Nullable<int> doctorID, string doctorName, Nullable<int> doctorDegree, string doctorExpertise, Nullable<bool> isActive)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var doctorDegreeParameter = doctorDegree.HasValue ?
                new ObjectParameter("DoctorDegree", doctorDegree) :
                new ObjectParameter("DoctorDegree", typeof(int));
    
            var doctorExpertiseParameter = doctorExpertise != null ?
                new ObjectParameter("DoctorExpertise", doctorExpertise) :
                new ObjectParameter("DoctorExpertise", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDoctor", doctorIDParameter, doctorNameParameter, doctorDegreeParameter, doctorExpertiseParameter, isActiveParameter);
        }
    
        public virtual int CreateDoctorDegree(Nullable<int> degreeID, string degreeName, Nullable<bool> isActive)
        {
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var degreeNameParameter = degreeName != null ?
                new ObjectParameter("DegreeName", degreeName) :
                new ObjectParameter("DegreeName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDoctorDegree", degreeIDParameter, degreeNameParameter, isActiveParameter);
        }
    
        public virtual int CreateFileCase(Nullable<int> caseID, Nullable<int> patientID, string contact, string alternateNumber, Nullable<int> diseaseID, string relative_Name, Nullable<int> relative_Relation, Nullable<int> roomID, string symptoms, Nullable<int> status, Nullable<bool> isActive)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var alternateNumberParameter = alternateNumber != null ?
                new ObjectParameter("AlternateNumber", alternateNumber) :
                new ObjectParameter("AlternateNumber", typeof(string));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var relative_NameParameter = relative_Name != null ?
                new ObjectParameter("Relative_Name", relative_Name) :
                new ObjectParameter("Relative_Name", typeof(string));
    
            var relative_RelationParameter = relative_Relation.HasValue ?
                new ObjectParameter("Relative_Relation", relative_Relation) :
                new ObjectParameter("Relative_Relation", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var symptomsParameter = symptoms != null ?
                new ObjectParameter("Symptoms", symptoms) :
                new ObjectParameter("Symptoms", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateFileCase", caseIDParameter, patientIDParameter, contactParameter, alternateNumberParameter, diseaseIDParameter, relative_NameParameter, relative_RelationParameter, roomIDParameter, symptomsParameter, statusParameter, isActiveParameter);
        }
    
        public virtual int CreateMasterCode(Nullable<int> codeID, string codeText, string codeName)
        {
            var codeIDParameter = codeID.HasValue ?
                new ObjectParameter("CodeID", codeID) :
                new ObjectParameter("CodeID", typeof(int));
    
            var codeTextParameter = codeText != null ?
                new ObjectParameter("CodeText", codeText) :
                new ObjectParameter("CodeText", typeof(string));
    
            var codeNameParameter = codeName != null ?
                new ObjectParameter("CodeName", codeName) :
                new ObjectParameter("CodeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateMasterCode", codeIDParameter, codeTextParameter, codeNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CreateMasterData(Nullable<int> iD, string displayText, Nullable<int> masterCodeID, Nullable<bool> isActive)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var displayTextParameter = displayText != null ?
                new ObjectParameter("DisplayText", displayText) :
                new ObjectParameter("DisplayText", typeof(string));
    
            var masterCodeIDParameter = masterCodeID.HasValue ?
                new ObjectParameter("MasterCodeID", masterCodeID) :
                new ObjectParameter("MasterCodeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateMasterData", iDParameter, displayTextParameter, masterCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateMedicine(Nullable<int> medicineID, string medicineName, string code, string brand, Nullable<decimal> price, Nullable<decimal> priceperunit, Nullable<int> unitStock, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> isActive, ObjectParameter result)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var priceperunitParameter = priceperunit.HasValue ?
                new ObjectParameter("Priceperunit", priceperunit) :
                new ObjectParameter("Priceperunit", typeof(decimal));
    
            var unitStockParameter = unitStock.HasValue ?
                new ObjectParameter("UnitStock", unitStock) :
                new ObjectParameter("UnitStock", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateMedicine", medicineIDParameter, medicineNameParameter, codeParameter, brandParameter, priceParameter, priceperunitParameter, unitStockParameter, createdByParameter, createdDateParameter, isActiveParameter, result);
        }
    
        public virtual int CreatePatient(Nullable<int> patientID, string patientName, Nullable<System.DateTime> dOB, string gender, string email, Nullable<int> age, string contact, string address, Nullable<bool> isActive)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePatient", patientIDParameter, patientNameParameter, dOBParameter, genderParameter, emailParameter, ageParameter, contactParameter, addressParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateRole(Nullable<int> roleID, string roleName, ObjectParameter result)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateRole", roleIDParameter, roleNameParameter, result);
        }
    
        public virtual int CreateRoom(Nullable<int> roomID, string roomType, string charge, string totalRoom, Nullable<bool> isActive)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var chargeParameter = charge != null ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(string));
    
            var totalRoomParameter = totalRoom != null ?
                new ObjectParameter("TotalRoom", totalRoom) :
                new ObjectParameter("TotalRoom", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateRoom", roomIDParameter, roomTypeParameter, chargeParameter, totalRoomParameter, isActiveParameter);
        }
    
        public virtual int CreateStaff(Nullable<int> staffID, Nullable<int> userID, string name, Nullable<int> degreeID, Nullable<int> positionID, Nullable<int> shiftID, Nullable<int> expertiseID, Nullable<int> typeID, Nullable<bool> isActive)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var expertiseIDParameter = expertiseID.HasValue ?
                new ObjectParameter("ExpertiseID", expertiseID) :
                new ObjectParameter("ExpertiseID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateStaff", staffIDParameter, userIDParameter, nameParameter, degreeIDParameter, positionIDParameter, shiftIDParameter, expertiseIDParameter, typeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CreateUserRole(Nullable<int> userRoleID, Nullable<int> userID, Nullable<int> roleID, Nullable<bool> isActive)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateUserRole", userRoleIDParameter, userIDParameter, roleIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CreateUsers(Nullable<int> userID, string userName, string password, string emailAddress, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateUsers", userIDParameter, userNameParameter, passwordParameter, emailAddressParameter, isActiveParameter);
        }
    
        public virtual int DeleteBill(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBill", billIDParameter);
        }
    
        public virtual int DeleteCaseMedicine(Nullable<int> medicineID)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCaseMedicine", medicineIDParameter);
        }
    
        public virtual int DeleteDoctor(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDoctor", doctorIDParameter);
        }
    
        public virtual int DeleteDoctorDegree(Nullable<int> degreeID)
        {
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDoctorDegree", degreeIDParameter);
        }
    
        public virtual int DeleteFileCase(Nullable<int> caseID)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFileCase", caseIDParameter);
        }
    
        public virtual int DeleteMasterCode(Nullable<int> codeID)
        {
            var codeIDParameter = codeID.HasValue ?
                new ObjectParameter("CodeID", codeID) :
                new ObjectParameter("CodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMasterCode", codeIDParameter);
        }
    
        public virtual int DeleteMasterData(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMasterData", iDParameter);
        }
    
        public virtual int DeleteMedicine(Nullable<int> medicineID)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMedicine", medicineIDParameter);
        }
    
        public virtual int DeletePatient(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient", patientIDParameter);
        }
    
        public virtual int DeleteRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole", roleIDParameter);
        }
    
        public virtual int DeleteRoom(Nullable<int> roomID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoom", roomIDParameter);
        }
    
        public virtual int DeleteStaff(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStaff", staffIDParameter);
        }
    
        public virtual int DeleteUserRole(Nullable<int> userRoleID)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRole", userRoleIDParameter);
        }
    
        public virtual int DeleteUsers(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsers", userIDParameter);
        }
    
        public virtual ObjectResult<GetMasterData_Result> GetMasterData(Nullable<int> masterDataID)
        {
            var masterDataIDParameter = masterDataID.HasValue ?
                new ObjectParameter("MasterDataID", masterDataID) :
                new ObjectParameter("MasterDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterData_Result>("GetMasterData", masterDataIDParameter);
        }
    
        public virtual ObjectResult<GetMasterDataById_Result> GetMasterDataById(Nullable<int> masterDataId)
        {
            var masterDataIdParameter = masterDataId.HasValue ?
                new ObjectParameter("MasterDataId", masterDataId) :
                new ObjectParameter("MasterDataId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterDataById_Result>("GetMasterDataById", masterDataIdParameter);
        }
    
        public virtual ObjectResult<ReadBill_Result> ReadBill()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadBill_Result>("ReadBill");
        }
    
        public virtual ObjectResult<ReadCaseMedicine_Result> ReadCaseMedicine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadCaseMedicine_Result>("ReadCaseMedicine");
        }
    
        public virtual ObjectResult<ReadDoctor_Result> ReadDoctor(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadDoctor_Result>("ReadDoctor", doctorIDParameter);
        }
    
        public virtual ObjectResult<ReadDoctorDegree_Result> ReadDoctorDegree(Nullable<int> degreeID)
        {
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadDoctorDegree_Result>("ReadDoctorDegree", degreeIDParameter);
        }
    
        public virtual ObjectResult<ReadFileCase_Result> ReadFileCase(Nullable<int> caseID)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadFileCase_Result>("ReadFileCase", caseIDParameter);
        }
    
        public virtual ObjectResult<ReadMasterCode_Result> ReadMasterCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadMasterCode_Result>("ReadMasterCode");
        }
    
        public virtual ObjectResult<ReadMasterData_Result> ReadMasterData(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadMasterData_Result>("ReadMasterData", iDParameter);
        }
    
        public virtual ObjectResult<ReadMedicine_Result> ReadMedicine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadMedicine_Result>("ReadMedicine");
        }
    
        public virtual ObjectResult<ReadPatient_Result> ReadPatient(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadPatient_Result>("ReadPatient", patientIDParameter);
        }
    
        public virtual ObjectResult<ReadRole_Result> ReadRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadRole_Result>("ReadRole", roleIDParameter);
        }
    
        public virtual ObjectResult<ReadRoom_Result> ReadRoom(Nullable<int> roomID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadRoom_Result>("ReadRoom", roomIDParameter);
        }
    
        public virtual ObjectResult<ReadStaff_Result> ReadStaff(Nullable<int> staffID, Nullable<bool> iSActive)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var iSActiveParameter = iSActive.HasValue ?
                new ObjectParameter("ISActive", iSActive) :
                new ObjectParameter("ISActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadStaff_Result>("ReadStaff", staffIDParameter, iSActiveParameter);
        }
    
        public virtual ObjectResult<ReadUserRole_Result> ReadUserRole(Nullable<int> userRoleId)
        {
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadUserRole_Result>("ReadUserRole", userRoleIdParameter);
        }
    
        public virtual ObjectResult<ReadUsers_Result> ReadUsers(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadUsers_Result>("ReadUsers", userIDParameter);
        }
    
        public virtual int UpdateBill(Nullable<int> billID, Nullable<int> userID, Nullable<int> patientID, Nullable<int> medcineID, Nullable<decimal> amount, string status, Nullable<decimal> due, Nullable<decimal> deposite, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var medcineIDParameter = medcineID.HasValue ?
                new ObjectParameter("MedcineID", medcineID) :
                new ObjectParameter("MedcineID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dueParameter = due.HasValue ?
                new ObjectParameter("Due", due) :
                new ObjectParameter("Due", typeof(decimal));
    
            var depositeParameter = deposite.HasValue ?
                new ObjectParameter("Deposite", deposite) :
                new ObjectParameter("Deposite", typeof(decimal));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBill", billIDParameter, userIDParameter, patientIDParameter, medcineIDParameter, amountParameter, statusParameter, dueParameter, depositeParameter, updatedByParameter, updatedDateParameter, isActiveParameter);
        }
    
        public virtual int UpdateCaseMedicine(Nullable<int> medicineID, Nullable<int> medID, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> diseaseID, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var medIDParameter = medID.HasValue ?
                new ObjectParameter("MedID", medID) :
                new ObjectParameter("MedID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCaseMedicine", medicineIDParameter, medIDParameter, patientIDParameter, doctorIDParameter, diseaseIDParameter, updatedByParameter, updatedDateParameter, isActiveParameter);
        }
    
        public virtual int UpdateDoctor(Nullable<int> doctorID, string doctorName, Nullable<int> doctorDegree, string doctorExpertise)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var doctorDegreeParameter = doctorDegree.HasValue ?
                new ObjectParameter("DoctorDegree", doctorDegree) :
                new ObjectParameter("DoctorDegree", typeof(int));
    
            var doctorExpertiseParameter = doctorExpertise != null ?
                new ObjectParameter("DoctorExpertise", doctorExpertise) :
                new ObjectParameter("DoctorExpertise", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctor", doctorIDParameter, doctorNameParameter, doctorDegreeParameter, doctorExpertiseParameter);
        }
    
        public virtual int UpdateDoctorDegree(Nullable<int> degreeID, string degreeName)
        {
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var degreeNameParameter = degreeName != null ?
                new ObjectParameter("DegreeName", degreeName) :
                new ObjectParameter("DegreeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctorDegree", degreeIDParameter, degreeNameParameter);
        }
    
        public virtual int UpdateFileCase(Nullable<int> caseID, Nullable<int> patientID, string contact, string alternateNumber, Nullable<int> diseaseID, string relative_Name, Nullable<int> relative_Relation, Nullable<int> roomID, string symptoms, Nullable<int> status)
        {
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var alternateNumberParameter = alternateNumber != null ?
                new ObjectParameter("AlternateNumber", alternateNumber) :
                new ObjectParameter("AlternateNumber", typeof(string));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var relative_NameParameter = relative_Name != null ?
                new ObjectParameter("Relative_Name", relative_Name) :
                new ObjectParameter("Relative_Name", typeof(string));
    
            var relative_RelationParameter = relative_Relation.HasValue ?
                new ObjectParameter("Relative_Relation", relative_Relation) :
                new ObjectParameter("Relative_Relation", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var symptomsParameter = symptoms != null ?
                new ObjectParameter("Symptoms", symptoms) :
                new ObjectParameter("Symptoms", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileCase", caseIDParameter, patientIDParameter, contactParameter, alternateNumberParameter, diseaseIDParameter, relative_NameParameter, relative_RelationParameter, roomIDParameter, symptomsParameter, statusParameter);
        }
    
        public virtual int UpdateMasterCode(Nullable<int> codeID, string codeText, string codeName)
        {
            var codeIDParameter = codeID.HasValue ?
                new ObjectParameter("CodeID", codeID) :
                new ObjectParameter("CodeID", typeof(int));
    
            var codeTextParameter = codeText != null ?
                new ObjectParameter("CodeText", codeText) :
                new ObjectParameter("CodeText", typeof(string));
    
            var codeNameParameter = codeName != null ?
                new ObjectParameter("CodeName", codeName) :
                new ObjectParameter("CodeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMasterCode", codeIDParameter, codeTextParameter, codeNameParameter);
        }
    
        public virtual int UpdateMasterData(Nullable<int> iD, string displayText, Nullable<int> masterCodeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var displayTextParameter = displayText != null ?
                new ObjectParameter("DisplayText", displayText) :
                new ObjectParameter("DisplayText", typeof(string));
    
            var masterCodeIDParameter = masterCodeID.HasValue ?
                new ObjectParameter("MasterCodeID", masterCodeID) :
                new ObjectParameter("MasterCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMasterData", iDParameter, displayTextParameter, masterCodeIDParameter);
        }
    
        public virtual int UpdateMedicine(Nullable<int> medicineID, string medicineName, string code, string brand, Nullable<decimal> price, Nullable<decimal> priceperunit, Nullable<int> unitStock, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var priceperunitParameter = priceperunit.HasValue ?
                new ObjectParameter("Priceperunit", priceperunit) :
                new ObjectParameter("Priceperunit", typeof(decimal));
    
            var unitStockParameter = unitStock.HasValue ?
                new ObjectParameter("UnitStock", unitStock) :
                new ObjectParameter("UnitStock", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMedicine", medicineIDParameter, medicineNameParameter, codeParameter, brandParameter, priceParameter, priceperunitParameter, unitStockParameter, updatedByParameter, updatedDateParameter, isActiveParameter);
        }
    
        public virtual int UpdatePatient(Nullable<int> patientID, string patientName, Nullable<System.DateTime> dOB, string gender, string email, Nullable<int> age, string contact, string address)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", patientIDParameter, patientNameParameter, dOBParameter, genderParameter, emailParameter, ageParameter, contactParameter, addressParameter);
        }
    
        public virtual int UpdateRole(Nullable<int> roleID, string roleName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRole", roleIDParameter, roleNameParameter);
        }
    
        public virtual int UpdateRoom(Nullable<int> roomID, string roomType, string charge, string totalRoom)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var chargeParameter = charge != null ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(string));
    
            var totalRoomParameter = totalRoom != null ?
                new ObjectParameter("TotalRoom", totalRoom) :
                new ObjectParameter("TotalRoom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoom", roomIDParameter, roomTypeParameter, chargeParameter, totalRoomParameter);
        }
    
        public virtual int UpdateStaff(Nullable<int> staffID, Nullable<int> userID, string name, Nullable<int> degreeID, Nullable<int> positionID, Nullable<int> shiftID, Nullable<int> expertiseID, Nullable<int> typeID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var expertiseIDParameter = expertiseID.HasValue ?
                new ObjectParameter("ExpertiseID", expertiseID) :
                new ObjectParameter("ExpertiseID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStaff", staffIDParameter, userIDParameter, nameParameter, degreeIDParameter, positionIDParameter, shiftIDParameter, expertiseIDParameter, typeIDParameter);
        }
    
        public virtual int UpdateUserRole(Nullable<int> userRoleID, Nullable<int> userID, Nullable<int> roleID)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserRole", userRoleIDParameter, userIDParameter, roleIDParameter);
        }
    
        public virtual int UpdateUsers(Nullable<int> userID, string userName, string password, string emailAddress)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUsers", userIDParameter, userNameParameter, passwordParameter, emailAddressParameter);
        }
    
        public virtual ObjectResult<string> ValidateUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateUser", userNameParameter, passwordParameter);
        }
    }
}
